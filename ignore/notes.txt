#TO ADD
# NOT NECESSARY, already absolute scale. calculate distances to QR codes with stereo cameras
# DONE with CV2 algo. calculate distances to QR codes with mono cameras, knowing size of QR? QR represents size!!
# DONE with Nicolai Nielssen code ^first calibrate camera... calibrate it automatically in real time?
# Use Kalman Filter to improve noisy readings of position
# Refactor the whole code
# Do for the little squares, is that more robust?
#calculate distance of one object to another in 3D space
# ArUco board tutorial https://longervision.github.io/2017/03/12/ComputerVision/OpenCV/opencv-external-posture-estimation-ArUco-board/
# READ drawFrameAxes() https://docs.opencv.org/3.4/d9/d0c/group__calib3d.html#gab3ab7bb2bdfe7d5d9745bb92d13f9564


This function receives the detected markers and returns the pose of a marker board composed by those markers. A Board of marker has a single world coordinate system which is defined by the board layout. The returned transformation is the one that transforms points from the board coordinate system to the camera coordinate system. Input markers that are not included in the board layout are ignored. The function returns the number of markers from the input employed for the board pose estimation. Note that returning a 0 means the pose has not been estimated.


#### recording ###############################################
fourcc = cv2.VideoWriter_fourcc(*'XVID')
out = cv2.VideoWriter('./output.avi', fourcc, 20.0, (640, 480))
    # Converts to HSV color space, OCV reads colors as BGR
    # frame is converted to hsv
    hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)

    # output the frame
    out.write(hsv)
    out.release()